
def tsp(dist):
    """
    Solve the Travelling Salesman Problem using DP and bitmasking.
    
    Args:
        dist (list of list of int): distance matrix where dist[i][j] is the distance from city i to city j.
        
    Returns:
        int: minimum cost to visit all cities and return to the start.
    """
    n = len(dist)
    ALL_VISITED = (1 << n) - 1  # bitmask when all cities are visited

    memo = [[None] * n for _ in range(1 << n)]

    def visit(city, visited):
        # If all cities are visited, return cost to go back to starting city (0)
        if visited == ALL_VISITED:
            return dist[city][0]

        # Return cached result if available
        if memo[visited][city] is not None:
            return memo[visited][city]

        ans = float('inf')
        for nxt in range(n):
            # If city nxt is not visited
            if (visited & (1 << nxt)) == 0:
                cost = dist[city][nxt] + visit(nxt, visited | (1 << nxt))
                ans = min(ans, cost)

        memo[visited][city] = ans
        return ans

    # Start at city 0, with only city 0 visited
    return visit(0, 1 << 0)


# Example usage:
dist_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

print("Minimum TSP cost:", tsp(dist_matrix))
