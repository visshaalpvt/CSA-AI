# 8-Queens Problem using Backtracking

N = 8  # size of chessboard (8x8)

def print_board(board):
    for row in board:
        line = ""
        for cell in row:
            line += "Q " if cell == 1 else ". "
        print(line)
    print("\n")

def is_safe(board, row, col):
    # Check this column on previous rows
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper left diagonal
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1

    # Check upper right diagonal
    i, j = row, col
    while i >= 0 and j < N:
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1

    return True

def solve_queens(board, row):
    if row == N:
        print_board(board)
        return True  # solution found

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve_queens(board, row + 1):
                return True  # stop after finding one solution
            board[row][col] = 0  # backtrack
    return False

# Driver code
if __name__ == "__main__":
    board = [[0] * N for _ in range(N)]
    if not solve_queens(board, 0):
        print("No solution exists")
